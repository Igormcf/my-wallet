{"version":3,"sources":["images/logomywallet.png","images/img4.png","pages/Login.js","actions/index.js","components/TableExpenses.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","Login","state","email","senha","isEnterButtonDisabled","handleChangeInputs","bind","validate","onSubmitBtn","this","props","history","dispatchUser","push","target","name","value","setState","emailValidado","test","validSenha","length","className","src","logo","alt","required","data-testid","id","type","onChange","htmlFor","disabled","onClick","img4","React","Component","connect","dispatch","payload","loginInfos","TableExpenses","onDeleteExpenseBtn","expenseItem","deleteItem","expenses","filter","item","itemForEdit","map","key","description","tag","method","parseFloat","toFixed","exchangeRates","currency","ask","wallet","deleteExpense","btnEdit","idIndex","Wallet","isButtonDisabled","onAddBtn","onSubmitExpenseEdited","coinsFetch","editExpensefunc","listExpenses","expensesFunc","currencies","btnForm","valorTotal","reduce","acc","curr","user","a","fetch","response","json","data","fetchCurrencies","Object","keys","fetchAddExchanges","editExpense","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c56cdd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logomywallet.da84bafd.png\";","module.exports = __webpack_public_path__ + \"static/media/img4.8ad3333b.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loginInfos } from '../actions';\nimport '../css/Login.css';\nimport img4 from '../images/img4.png';\nimport logo from '../images/logomywallet.png'\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      senha: '',\n      isEnterButtonDisabled: true,\n    };\n    this.handleChangeInputs = this.handleChangeInputs.bind(this);\n    this.validate = this.validate.bind(this);\n    this.onSubmitBtn = this.onSubmitBtn.bind(this);\n  }\n\n  onSubmitBtn() {\n    const { history, dispatchUser } = this.props;\n    const { email } = this.state;\n\n    dispatchUser(email);\n    history.push('/carteira');\n  }\n\n  handleChangeInputs({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => this.validate());\n  }\n\n  validate() {\n    const { email, senha } = this.state;\n    const num = 6;\n    const validEmail = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const emailValidado = validEmail.test(email);\n    const validSenha = senha.length >= num;\n    const formValidado = emailValidado && validSenha;\n    if (formValidado) {\n      this.setState({ isEnterButtonDisabled: false });\n    } else {\n      this.setState({ isEnterButtonDisabled: true });\n    }\n  }\n\n  render() {\n    const { email, senha, isEnterButtonDisabled } = this.state;\n    return (\n      <body className=\"body-login\">\n        <header className=\"header-login\">\n          <img src={ logo } alt=\"logo\" className=\"img-logo\" />\n        </header>\n        <main className=\"container-login\">\n          <section className=\"section-form\">\n            <form className=\"form-login\">\n              <h1>Login</h1>\n              <div className=\"group\">\n                <input\n                  className=\"input-login\"\n                  required\n                  data-testid=\"email-input\"\n                  name=\"email\"\n                  id=\"email\"\n                  type=\"text\"\n                  value={ email }\n                  onChange={ this.handleChangeInputs }\n                />\n                <span className=\"highlight\"></span>\n                <span className=\"bar\"></span>\n                <label htmlFor=\"email\" className=\"label-login\" >\n                  E-mail\n                </label>\n              </div>\n              <div className=\"group\">\n                <input\n                  className=\"input-login\"\n                  required\n                  data-testid=\"password-input\"\n                  name=\"senha\"\n                  id=\"senha\"\n                  type=\"password\"\n                  value={ senha }\n                  onChange={ this.handleChangeInputs }\n                />\n                <span className=\"highlight\"></span>\n                <span className=\"bar\"></span>\n                <label htmlFor=\"senha\" className=\"label-login\">\n                  Senha\n                </label>\n              </div>\n            </form>\n            <button\n              id=\"btn-login\"\n              type=\"button\"\n              disabled={ isEnterButtonDisabled }\n              onClick={ this.onSubmitBtn }\n            >\n              Entrar\n            </button>\n          </section>\n          <section className=\"section-login\">\n            <img src={ img4 } alt=\"porquinho-login\" className=\"img-login\" />\n          </section>\n        </main>\n      </body>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUser: (payload) => dispatch(loginInfos(payload)),\n});\n\nLogin.propTypes = {\n  dispatchUser: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","// Coloque aqui suas actions\nexport const INFO_LOGIN = 'INFO_LOGIN';\nexport const INFO_WALLET = 'INFO_WALLET';\nexport const LIST_EXPENSE = 'LIST_EXPENSE';\nexport const DELET_EXPENSE = 'DELET_EXPENSE';\nexport const BTN_EDIT = 'BTN_EDIT';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\n\nexport const loginInfos = (payload) => ({\n  type: INFO_LOGIN,\n  payload,\n});\n\nexport const walletInfos = (payload) => ({\n  type: INFO_WALLET,\n  payload,\n});\n\nexport const expensesList = (payload) => ({\n  type: LIST_EXPENSE,\n  payload,\n});\n\nexport const deleteExpense = (payload) => ({\n  type: DELET_EXPENSE,\n  payload,\n});\n\nexport const btnEdit = (payload) => ({\n  type: BTN_EDIT,\n  payload,\n});\n\nexport const editExpense = (payload) => ({\n  type: EDIT_EXPENSE,\n  payload,\n});\n\nexport const fetchCoins = () => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  const fetchCurrencies = Object.keys(data).filter((item) => item !== 'USDT');\n  dispatch(walletInfos(fetchCurrencies));\n};\n\nexport const fetchAddExchanges = (listExpenses) => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  listExpenses.exchangeRates = data;\n  dispatch(expensesList(listExpenses));\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExpense, btnEdit } from '../actions';\n\nclass TableExpenses extends React.Component {\n  constructor() {\n    super();\n    this.onDeleteExpenseBtn = this.onDeleteExpenseBtn.bind(this);\n  }\n\n  onDeleteExpenseBtn(expenseItem) {\n    const { deleteItem } = this.props;\n    const { expenses } = this.props;\n    const newExpensesList = expenses.filter((item) => item !== expenseItem);\n\n    deleteItem(newExpensesList);\n  }\n\n  render() {\n    const { expenses, itemForEdit } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          { expenses.map((item) => (\n            <tr key={ item.id }>\n              <td>{ item.description }</td>\n              <td>{ item.tag }</td>\n              <td>{ item.method }</td>\n              <td>{ parseFloat(item.value).toFixed(2) }</td>\n              <td>{ (item.exchangeRates[item.currency].name) }</td>\n              <td>{ parseFloat(item.exchangeRates[item.currency].ask).toFixed(2) }</td>\n              <td>\n                { (parseFloat(item.exchangeRates[item.currency]\n                  .ask) * item.value).toFixed(2) }\n              </td>\n              <td>Real</td>\n              <td>\n                <button\n                  type=\"button\"\n                  id=\"edit-btn\"\n                  data-testid=\"edit-btn\"\n                  onClick={ () => itemForEdit(item.id) }\n                >\n                  Editar\n                </button>\n                <button\n                  id=\"delet-btn\"\n                  type=\"button\"\n                  data-testid=\"delete-btn\"\n                  onClick={ () => this.onDeleteExpenseBtn(item) }\n                >\n                  Excluir\n                </button>\n              </td>\n            </tr>\n          )) }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteItem: (payload) => dispatch(deleteExpense(payload)),\n  itemForEdit: (payload) => dispatch(btnEdit(payload)),\n});\n\nTableExpenses.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.any).isRequired,\n  deleteItem: PropTypes.func.isRequired,\n  itemForEdit: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableExpenses);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCoins, fetchAddExchanges, editExpense } from '../actions';\nimport TableExpenses from '../components/TableExpenses';\nimport '../css/Wallet.css';\nimport logo from '../images/logomywallet.png'\n\nconst alimentos = 'Alimentação';\nlet idIndex = 0;\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: alimentos,\n      isButtonDisabled: true,\n    };\n    this.handleChangeInputs = this.handleChangeInputs.bind(this);\n    this.validate = this.validate.bind(this);\n    this.onAddBtn = this.onAddBtn.bind(this);\n    this.onSubmitExpenseEdited = this.onSubmitExpenseEdited.bind(this);\n  }\n\n  componentDidMount() {\n    const { coinsFetch } = this.props;\n    coinsFetch();\n  }\n\n  onSubmitExpenseEdited() {\n    const { value, currency, description, method, tag } = this.state;\n    const { expenses, id, editExpensefunc } = this.props;\n\n    const listExpenses = [...expenses];\n    const expenseItem = listExpenses[parseFloat(id)];\n    expenseItem.value = value;\n    expenseItem.currency = currency;\n    expenseItem.description = description;\n    expenseItem.method = method;\n    expenseItem.tag = tag;\n\n    editExpensefunc(listExpenses);\n    this.setState({\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: alimentos,\n      isButtonDisabled: true,\n    });\n  }\n\n  onAddBtn() {\n    const { value, currency, description, method, tag } = this.state;\n    const { expensesFunc } = this.props;\n    const listExpenses = { id: idIndex, value, description, currency, method, tag };\n    expensesFunc(listExpenses);\n    idIndex += 1;\n    this.setState({\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: alimentos,\n    });\n  }\n\n  handleChangeInputs({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => this.validate());\n  }\n\n  validate() {\n    const { value, currency, description, method, tag } = this.state;\n    if (value && currency && description && method && tag) {\n      this.setState({ isButtonDisabled: false });\n    } else {\n      this.setState({ isButtonDisabled: true });\n    }\n  }\n\n  render() {\n    const { email, currencies, expenses, btnForm } = this.props;\n    const { value, currency, description, method, tag, isButtonDisabled } = this.state;\n    const valorTotal = expenses.reduce((acc, curr) => {\n      acc += curr.value * parseFloat(curr.exchangeRates[curr.currency].ask);\n      return acc;\n    }, 0);\n    return (\n      <div className=\"container-wallet\">\n        <header className=\"header-wallet\">\n          <img src={ logo } alt=\"logo\" className=\"img-logo-wallet\" />\n          <section className=\"section-info-expenses\">\n            <div className=\"info-expense\">\n              <p><b>E-mail:</b></p>\n              <span><p data-testid=\"email-field\">{ email }</p></span>\n            </div>\n            <div className=\"info-expense\">\n              <p><b>Despesas totais:</b></p>\n              <span><p data-testid=\"total-field\">{ valorTotal.toFixed(2) }</p></span>\n            </div>\n            <div className=\"info-expense\">\n              <p><b>Câmbio usado:</b></p>\n              <span><p data-testid=\"header-currency-field\">BRL</p></span>\n            </div>\n          </section>\n        </header>\n        <nav className=\"nav-wallet\">\n          <form className=\"form-wallet\">\n            <label htmlFor=\"value\">\n              <b>Valor:</b>\n              <input\n                type=\"number\"\n                name=\"value\"\n                data-testid=\"value-input\"\n                id=\"value\"\n                value={ value }\n                onChange={ this.handleChangeInputs }\n              />\n            </label>\n            { ' ' }\n            <label htmlFor=\"currency\">\n              <b>Moeda:</b>\n              <select\n                data-testid=\"currency-input\"\n                id=\"currency\"\n                name=\"currency\"\n                value={ currency }\n                onChange={ this.handleChangeInputs }\n              >\n                { currencies.map((item) => <option key={ item } className=\"option\">{item}</option>) }\n              </select>\n            </label>\n            { ' ' }\n            <label htmlFor=\"description\">\n              <b>Descrição:</b>\n              <input\n                type=\"text\"\n                name=\"description\"\n                data-testid=\"description-input\"\n                id=\"description\"\n                value={ description }\n                onChange={ this.handleChangeInputs }\n              />\n            </label>\n            { ' ' }\n            <label htmlFor=\"method\">\n              <b>Método de pagamento:</b>\n              <select\n                id=\"method\"\n                name=\"method\"\n                data-testid=\"method-input\"\n                value={ method }\n                onChange={ this.handleChangeInputs }\n              >\n                <option className=\"option\">Dinheiro</option>\n                <option className=\"option\">Cartão de crédito</option>\n                <option className=\"option\">Cartão de débito</option>\n              </select>\n            </label>\n            { ' ' }\n            <label htmlFor=\"tag\">\n              <b>Categoria:</b>\n              <select\n                id=\"tag\"\n                name=\"tag\"\n                data-testid=\"tag-input\"\n                value={ tag }\n                onChange={ this.handleChangeInputs }\n              >\n                <option className=\"option\">Alimentação</option>\n                <option className=\"option\">Lazer</option>\n                <option className=\"option\">Trabalho</option>\n                <option className=\"option\">Transporte</option>\n                <option className=\"option\">Saúde</option>\n              </select>\n            </label>\n            <button\n              id=\"btn-form-wallet\"\n              type=\"button\"\n              disabled={ isButtonDisabled }\n              onClick={ btnForm\n                ? () => this.onAddBtn() : () => this.onSubmitExpenseEdited() }\n            >\n              { btnForm ? 'Adicionar despesa' : 'Editar despesa' }\n            </button>\n          </form>\n        </nav>\n        <main className=\"main-wallet\">\n          <TableExpenses />\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  coinsFetch: () => dispatch(fetchCoins()),\n  expensesFunc: (listExpenses) => dispatch(fetchAddExchanges(listExpenses)),\n  editExpensefunc: (payload) => dispatch(editExpense(payload)),\n});\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  btnForm: state.wallet.btnForm,\n  id: state.wallet.id,\n});\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  coinsFetch: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.any).isRequired,\n  expensesFunc: PropTypes.func.isRequired,\n  btnForm: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired,\n  editExpensefunc: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { INFO_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case INFO_LOGIN:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  INFO_WALLET,\n  LIST_EXPENSE,\n  DELET_EXPENSE,\n  BTN_EDIT,\n  EDIT_EXPENSE,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  btnForm: true,\n  id: 0,\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case INFO_WALLET:\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  case LIST_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n    };\n  case DELET_EXPENSE:\n    return {\n      ...state,\n      expenses: action.payload,\n    };\n  case BTN_EDIT:\n    return {\n      ...state,\n      btnForm: false,\n      id: action.payload,\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      btnForm: true,\n      expenses: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}